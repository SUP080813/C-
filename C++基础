一、String类的具体实现：
class String {
public:
  String(const char* str = NULL); //普通构造函数
  String(const String &another); //拷贝构造
  String& operator=(const String& rhs); //赋值函数
  ~String(); //析构函数;
private:
  char* m_data; //成员函数
}

String:String(const char* str) {
  if(str == NULL) {
    m_data = new char[1];
    m_data = '/0';
  }
  else {
    m_data = new char[strlen(str) + 1]；
    strcpy(m_data, str);
  }
}

String:String(const String& another) {
  m_data = new char[strlen(another.m_data) + 1];
  strcpy(m_data, another.m_data);
}

String:String& operator=(const String& rhs) {
  if(this == &rhs)
    return *this;
  delete[] m_data;
  m_data = new char[strlen(rhs.m_data) + 1];
  strcpy(m_data, rhs.m_data);
  return *this;
}

String：~String() {
  delete[] m_data;
}

二、排序算法：
1、快排:
步骤：1.先从数列中取出一个数作为基准数（第一个数）
      2.分区：将比这个数大的数全放到右边，小于等于的数放到左边
      3.对左右分区重复上述步骤，直至区间内只有一个数。
void quickSort(int *array, int left, int right) {
  if(left < right) {
    int temp;
    int pivot = array[left];
    int low = left;
    int high = right;
    while(low < right) {
      while(array[high] >= pivot && low < high) {
        high--;
      }
      while(array[low] <= pivot && low < high) {
        low++
      }
      if(low < right) {
        temp = arr[low];
        array[low] = array[high];
        array[high] = temp;
      }
    }
    array[left] = array[low];
    array[low] = pivot;
    quickSort(array, left, low - 1);
    quickSort(array, low + 1, right);
  }    
}

2、选择排序
步骤：1.从待排序元素找出最小的元素存放在起始位置；
      2.从剩余未排序元素中找到最小元素，置于已排序队尾
      3.重复上述步骤，直至待排序元素为0。
void selelctionSort(vector<int> &q) {
  for(int i = 0; i < q.size(); i++) {
    for(int j = i + 1； j < q.size(); j++) {
      if(q[i] > q[j]) {
        swap(q[i], q[j]);
      }
    }
  }
}

3、插入排序
步骤：1.从第一个元素开始认为已经排序；
      2.取下一个元素，在已经排序的元素序列从后向前扫描；
      3.已排序元素大于新元素，新元素移到下一个位置；
      4.知道找到已排序的元素小于或等于新元素的位置；
      5.新元素插入到该位置，重复上述步骤。
void insertSort(vector<int> &q) {
  for(int i = 1; i < q.size(); i++) {
    int t = q[i];
    for(int j = i - 1; j >=0; j--) {
      if(q[j] > t)
        q[j + 1] = q[j];
      else
        break;
    }
    q[j + 1] = t;
  }
}

4、冒泡排序
步骤：1.比较相邻元素，若第二个数比第一个数大，交换；
      2.重复上述操作，最后一个数是最大的数；
      3.重复上述操作，除了最后一个数，直至没有元素需要比较。
void bubbleSort(vector<int> &q) {
  for(int i = q.size() -1; i > 0; i--) {
    bool flag = false;
    for(int j = 0; j + 1< = i; j++) {
      if(q[j] > q[j + 1]) {
      swap(q[j], q[j + 1]);
      flag = true;
      }
    }
    if(!flag)
      break;
  }
}

5.希尔排序
void shellSort(vector<int> &q) {
  int gap = q.size()/2;
  while(gap) {
    for(int i =gap; i < q.size(); i+=gap) {
      int t = q[i];
      for(int j = i - gap; j >= 0; j-= gap) {
        if(q[j] > t)
          q[j + gap] = q[j];
        else
          break;
      }
      q[j + gap] = t;
    }
    gap /= 2;
  }
}

6.归并排序
void mergeSort(vector<int> &q, int l, int r) {
  if(l >= r) 
    return;
  int mid = l + r >> 1;
  mergeSort(q, l, mid);
  mergrSort(q, mid + 1, r);
  static vector<int> w;
  w.clear();
  int i = 1, j = mid + 1;
  while(i <= mid && j  <= r) {
    if(q[i] > q[j])
      w.push_back(q[j++]);
    else
      w.push_back(q[i++]);
  }
  while(i <= mid)
    w.push_back(q[i++]);
  while(j <= mid)
    w.push_back(q[j++]);
  for(int i : w)
    q[l++] = i;
} 
