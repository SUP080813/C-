一、String类的具体实现：
class String {
public:
  String(const char* str = NULL); //普通构造函数
  String(const String &another); //拷贝构造
  String& operator=(const String& rhs); //赋值函数
  ~String(); //析构函数;
private:
  char* m_data; //成员函数
}

String:String(const char* str) {
  if(str == NULL) {
    m_data = new char[1];
    m_data = '/0';
  }
  else {
    m_data = new char[strlen(str) + 1]；
    strcpy(m_data, str);
  }
}

String:String(const String& another) {
  m_data = new char[strlen(another.m_data) + 1];
  strcpy(m_data, another.m_data);
}

String:String& operator=(const String& rhs) {
  if(this == &rhs)
    return *this;
  delete[] m_data;
  m_data = new char[strlen(rhs.m_data) + 1];
  strcpy(m_data, rhs.m_data);
  return *this;
}

String：~String() {
  delete[] m_data;
}

二、排序算法：
1、快排:
void quickSort(int *array, int left, int right) {
  if(left < right) {
    int temp;
    int pivot = array[left];
    int low = left;
    int high = right;
    while(low < right) {
      while(array[high] >= pivot && low < high) {
        high--;
      }
      while(array[low] <= pivot && low < high) {
        low++
      }
      if(low < right) {
        temp = arr[low];
        array[low] = array[high];
        array[high] = temp;
      }
    }
    array[left] = array[low];
    array[low] = pivot;
    quickSort(array, left, low - 1);
    quickSort(array, low + 1, right);
  }    
}
